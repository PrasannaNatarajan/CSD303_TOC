package ques2;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Stack;

public class NFA {
	
	public static State toNFA(String inp){
		
		Stack<Fragment> fragStack = new Stack<Fragment>();
		Fragment comNFA = new Fragment();
		State matchState = new State();
		char[] input = inp.toCharArray();
		
		for(int i=0;i<input.length;i++){
			Fragment last1,last2,last;
			State newState;
			switch(input[i]){
			case '.': 
				last2 = fragStack.pop();
                last1 = fragStack.pop();
                attachFragmentToAState(last1, last2.getState());
                fragStack.push(new Fragment(last1.getState(), last2.getOutPtrs()));
				break;
			case '|':
				last2 = fragStack.pop();
                last1 = fragStack.pop();
                newState = new State(last1.getState(), last2.getState());
                fragStack.push(new Fragment(newState, appendOutPtrs(last1.getOutPtrs(), last2.getOutPtrs())));
				break;
			case '*':
				last = fragStack.pop();
                newState = new State(last.getState(), null);
                attachFragmentToAState(last, newState);
                fragStack.push(new Fragment(newState, newState));
				break;
			case '+':
				last = fragStack.pop();
            	newState = new State(last.getState(),null);
            	attachFragmentToAState(last, newState);
            	fragStack.push(new Fragment(last.getState(),newState));
				break;
				
			case '?':
				last = fragStack.pop();
            	newState = new State(last.getState(),null);
            	ArrayList<State> out = new ArrayList<State>();
            	out.add(newState);
            	fragStack.push(new Fragment(newState,appendOutPtrs(last.getOutPtrs(), out)));
				break;
			default:
				newState = new State(input[i]);
				fragStack.push(new Fragment(newState,newState));
				break;
			}
			
            
			
		}
		comNFA = fragStack.pop();
		attachFragmentToAState(comNFA,matchState);
		return comNFA.getState();
	}
	
	private static ArrayList<State> appendOutPtrs(ArrayList<State> a, ArrayList<State> b){
	        ArrayList <State> appended = new ArrayList <State> ();
	        for (int i = 0; i < a.size(); i++){
	            appended.add(a.get(i));
	        }
	        for (int i = 0; i < b.size(); i++){
	            appended.add(b.get(i));
	        }
	        return appended;
     }
	 
	private static void attachFragmentToAState(Fragment a, State s){
		ArrayList<State> toBePatched = a.getOutPtrs();
		for (int i = 0; i < toBePatched.size(); i++){
		    State openarrows = toBePatched.get(i);
		    openarrows.attachStates(s);
		}
	}
	
	
	public static String toPost(String inp){
		
		String s =inp;
		int counter = 0;
		char[] input = s.toCharArray(); 
		
		//make input proper with concatenations
		for(int i=0;i<inp.length()-1;i++){
			
			boolean first = input[i] != '|' && input[i] != '.' && input[i]!='(';
			boolean second = input[i+1]!='+' && input[i+1]!='*' && input[i+1] != '?' && input[i+1] != '|' && input[i+1] != '.'&& input[i+1]!='('&& input[i+1]!=')';
			if(first == true && second == true){				
				s = s.substring(0, counter+i+1) + "." + s.substring(counter+i+1,s.length());
				counter++;
			}
		}
		System.out.println("After concatenation: "+s);
		//make input into post fix form
		ArrayDeque<Character> opStack = new ArrayDeque<Character>();
		input = s.toCharArray();
		StringBuilder output = new StringBuilder();
		for(int i=0;i<input.length;i++){
			Boolean first = input[i]!='+' && input[i]!='*' && input[i] != '?' && 
					input[i] != '|' && input[i] != '.' && input[i]!=')' &&input[i]!='(';
			if(first){
				output.append(input[i]);
				System.out.println(output);
			}
			
			else if(input[i]==')'){
				char tos = opStack.pop();
				
				while(tos!='('){
					output.append(tos);
					tos = opStack.pop();
				}
			}
			else{
				
				if(opStack.isEmpty()){
					opStack.push(input[i]);
				}
				
				else{
					
					char tos = opStack.peek();
					Boolean isNotOperation = tos!='+' && tos!='*' && tos != '?' && tos != '|' && tos != '.';
					
					if(!isNotOperation){
						int p = getPrecedence(input[i], tos);
						if(p<=0){
							tos = opStack.pop();
							output.append(tos);
						}
					}
					
					opStack.push(input[i]);
				}
			}
			
		}
		
		while(!opStack.isEmpty()){
			output.append(opStack.pop());
		}
		
		s = output.toString();		
		return s;
	}
	
	
    private static int getPrecedence(char a, char b){
    	
        if(a=='*' || a=='+' || a=='?'){
        	return (b=='*' || b=='+' || b=='?')?0:1;
        }

        else if(a=='.'){
            return (b=='*' || b=='+' || b=='?')?-1:(b==a)?0:1;
        }

        else if(a=='|'){
        	return (a==b)?0:-1;
        }

        return -2;
    }
	

}


